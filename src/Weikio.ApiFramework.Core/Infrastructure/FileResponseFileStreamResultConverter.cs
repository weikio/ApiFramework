using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace Weikio.ApiFramework.Core.Infrastructure
{
    /// <summary>
    /// Can convert NSwag's FileResponse-type into FileStreamResult. FileResponse is dynamically code generated by NSwag so we can't directly compare types.
    /// </summary>
    public class FileResponseFileStreamResultConverter : IFileStreamResultConverter
    {    
        public bool CanConvertType(Type type)
        {
            if (type == null)
            {
                return false;
            }
            
            if (!string.Equals(type.Name, "FileResponse", StringComparison.InvariantCultureIgnoreCase))
            {
                return false;
            }

            var streamProperty = type.GetProperty("Stream");

            if (streamProperty == null)
            {
                return false;
            }

            var result = streamProperty.PropertyType == typeof(Stream);

            return result;
        }

        public Task<FileStreamResult> Convert(object obj)
        {
            var streamProperty = obj.GetType().GetProperty("Stream");

            if (streamProperty == null)
            {
                throw new Exception($"Couldn't locate Stream property from {obj.GetType().FullName}");
            }
            
            var stream = (Stream) streamProperty.GetValue(obj);

            var contentType = "application/octet-stream";
            
            var headersProperty = obj.GetType().GetProperty("Headers");

            if (headersProperty == null)
            {
                return Task.FromResult(new FileStreamResult(stream, contentType));
            }

            var headers =  (IReadOnlyDictionary<string, IEnumerable<string>>) headersProperty.GetValue(obj);

            if (headers?.ContainsKey("Content-Type") == true && headers["Content-Type"]?.Any() == true)
            {
                contentType = headers["Content-Type"].First();
            }

            return Task.FromResult(new FileStreamResult(stream, contentType)); 
        }
    }
}
